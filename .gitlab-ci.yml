stages:
  - test-validate
  - test-plan
  - test-apply
  - test-destroy
  - security-scan
  - prod-validate
  - prod-plan
  - prod-apply
  - prod-destroy

variables:
  TF_ROOT: "environments"

test-validate:
  stage: test-validate
  tags:
  - pltest
  - shell
  - suman
  script:
    - export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
    - export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"
    - export AWS_DEFAULT_REGION="eu-west-1"
    - aws sts get-caller-identity
    - cd $TF_ROOT/test && terraform init
    - terraform validate
  environment:
    name: test

test-plan:
  stage: test-plan
  tags:
  - pltest
  - shell
  - suman
  script:
    - cd $TF_ROOT/test
    - terraform init
    - terraform plan -var-file="terraform.tfvars" -out="plan.tfplan"
  environment:
    name: test
  artifacts:
    paths:
      - $TF_ROOT/test/plan.tfplan

test-apply:
  stage: test-apply
  tags:
  - pltest
  - shell
  - suman
  script:
    - cd $TF_ROOT/test
    - terraform init
    - terraform apply "plan.tfplan"
  environment:
    name: test
  needs: ["test-plan"]

test-destroy:
  stage: test-destroy
  tags:
  - pltest
  - shell
  - suman
  script:
    - cd $TF_ROOT/test
    - terraform init
    - terraform destroy --auto-approve
  environment:
    name: test

security-scan-test:
  stage: security-scan
  tags:
    - pltest
    - shell
    - suman
  script:
    - apt-get update && apt-get install -y wget unzip
    - wget https://github.com/aquasecurity/tfsec/releases/latest/download/tfsec-linux-amd64 -O tfsec
    - chmod +x tfsec
    - ./tfsec $TF_ROOT/test
  allow_failure: false

prod-validate:
  stage: prod-validate
  tags:
  - pltest
  - shell
  - suman
  script:
    - export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
    - export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"
    - export AWS_DEFAULT_REGION="eu-west-1"
    - aws sts get-caller-identity
    - cd $TF_ROOT/prod && terraform init
    - terraform validate
  environment:
    name: prod

prod-plan:
  stage: prod-plan
  tags:
  - pltest
  - shell
  - suman
  script:
    - cd $TF_ROOT/prod
    - terraform init
    - terraform plan -var-file="terraform.tfvars" -out="plan.tfplan"
  environment:
    name: prod
  artifacts:
    paths:
      - $TF_ROOT/prod/plan.tfplan

prod-apply:
  stage: prod-apply
  tags:
  - pltest
  - shell
  - suman
  script:
    - cd $TF_ROOT/prod
    - terraform init
    - terraform apply "plan.tfplan"
  environment:
    name: prod
  needs:
    - job: prod-plan
      artifacts: true
  when: manual
  allow_failure: false

prod-destroy:
  stage: prod-destroy
  tags:
  - pltest
  - shell
  - suman
  script:
    - cd $TF_ROOT/prod
    - terraform init
    - terraform destroy --auto-approve
  environment:
    name: prod
