stages:
  - test-validate
  - security-scan-test
  - test-plan
  - test-apply
  - test-destroy
  - prod-validate
  - security-scan-prod
  - prod-plan
  - prod-apply
  - prod-destroy

variables:
  TF_ROOT: "environments"

.default-tags: &default_tags
  - pltest
  - shell
  - suman

.export-prod-creds: &export_prod_creds
  - export AWS_ACCESS_KEY_ID="$PROD_AWS_ACCESS_KEY_ID"
  - export AWS_SECRET_ACCESS_KEY="$PROD_AWS_SECRET_ACCESS_KEY"
  - export AWS_DEFAULT_REGION="eu-west-1"

.export-test-creds: &export_test_creds
  - export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
  - export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"
  - export AWS_DEFAULT_REGION="eu-west-1"

test-validate:
  stage: test-validate
  tags: *default_tags
  script:
    - *export_test_creds
    - aws sts get-caller-identity
    - cd $TF_ROOT/test && terraform init
    - terraform fmt -check -diff
    - terraform validate
  environment:
    name: test

security-scan-test:
  stage: security-scan-test
  tags: *default_tags
  script:
    - apt-get update && apt-get install -y wget unzip
    - wget https://github.com/aquasecurity/tfsec/releases/latest/download/tfsec-linux-amd64 -O tfsec
    - chmod +x tfsec
    - ./tfsec $TF_ROOT/test || true
  allow_failure: false

test-plan:
  stage: test-plan
  tags: *default_tags
  script:
    - cd $TF_ROOT/test
    - terraform init
    - terraform plan -var-file="terraform.tfvars" -out="plan.tfplan"
    - terraform plan -var-file="terraform.tfvars"  > plan.txt
  environment:
    name: test
  artifacts:
    paths:
      - $TF_ROOT/test/plan.tfplan
      - $TF_ROOT/test/plan.txt
      - $TF_ROOT/test/.terraform.lock.hcl
      - $TF_ROOT/test/.terraform/
    expire_in: 1 hour

test-apply:
  stage: test-apply
  tags: *default_tags
  script:
    - cd $TF_ROOT/test
    - terraform apply "plan.tfplan"
  environment:
    name: test
  needs:
    - job: test-plan
      artifacts: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

test-destroy:
  stage: test-destroy
  tags:
  - pltest
  - shell
  - suman
  script:
    - cd $TF_ROOT/test
    - terraform destroy --auto-approve
  environment:
    name: test
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  when: manual
  allow_failure: false

prod-validate:
  stage: prod-validate
  tags:
  - pltest
  - shell
  - suman
  script:
    - *export_prod_creds
    - aws sts get-caller-identity
    - cd $TF_ROOT/prod && terraform init
    - terraform fmt -check -diff
    - terraform validate
  environment:
    name: prod

security-scan-prod:
  stage: security-scan-prod
  tags:
  - pltest
  - shell
  - suman
  script:
    - apt-get update && apt-get install -y wget unzip
    - wget https://github.com/aquasecurity/tfsec/releases/latest/download/tfsec-linux-amd64 -O tfsec
    - chmod +x tfsec
    - ./tfsec $TF_ROOT/prod || true
  allow_failure: false

prod-plan:
  stage: prod-plan
  tags:
  - pltest
  - shell
  - suman
  script:
    - *export_prod_creds
    - cd $TF_ROOT/prod
    - aws sts get-caller-identity
    - terraform init
    - terraform plan -var-file="terraform.tfvars" -out="plan.tfplan"
    - terraform plan -var-file="terraform.tfvars"  > plan.txt
  environment:
    name: prod
  artifacts:
    paths:
      - $TF_ROOT/prod/plan.tfplan
      - $TF_ROOT/prod/plan.txt
      - $TF_ROOT/prod/.terraform.lock.hcl
      - $TF_ROOT/prod/.terraform/
    expire_in: 1 hour

prod-apply:
  stage: prod-apply
  tags:
  - pltest
  - shell
  - suman
  script:
    - *export_prod_creds
    - cd $TF_ROOT/prod
    - terraform apply "plan.tfplan"
  environment:
    name: prod
  needs:
    - job: prod-plan
      artifacts: true
  when: manual
  allow_failure: false
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

prod-destroy:
  stage: prod-destroy
  tags:
  - pltest
  - shell
  - suman
  script:
    - *export_prod_creds
    - cd $TF_ROOT/prod
    - terraform destroy --auto-approve
  environment:
    name: prod
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  when: manual
  allow_failure: false
